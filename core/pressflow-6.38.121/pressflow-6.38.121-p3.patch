diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 6dcfec5..4643a7f 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,4 +1,17 @@
-Drupal 6.38-p2, 2018-02-21 - SA-CORE-2016-003
+Drupal 6.38-p3, 2018-03-28 - SA-CORE-2018-002
+
+A remote code execution vulnerability exists within multiple subsystems.
+This potentially allows attackers to exploit multiple attack vectors on a
+Drupal site, which could result in the site being completely compromised.
+
+The security team has written an FAQ about this issue.
+https://groups.drupal.org/security/faq-2018-002
+
+Upstream reference:
+https://www.drupal.org/sa-core-2018-002
+
+
+Drupal 6.38-p2, 2018-02-21 - SA-CORE-2018-001
 ---------------------------------------------
 
 CVE-2017-6927: JavaScript cross-site scripting prevention is incomplete
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index acc055e..afed740 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -1483,6 +1483,7 @@ function _drupal_bootstrap($phase) {
       timer_start('page');
       // Initialize the configuration
       conf_init();
+      _drupal_bootstrap_sanitize_request();
       break;
 
     case DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE:
@@ -2207,3 +2208,57 @@ function filter_xss_bad_protocol($string, $decode = TRUE) {
   } while ($before != $string);
   return check_plain($string);
 }
+
+/**
+ * Sanitizes unsafe keys from the request.
+ */
+function _drupal_bootstrap_sanitize_request() {
+  global $conf;
+  static $sanitized;
+
+  if (!$sanitized) {
+    // Ensure the whitelist array exists.
+    if (!isset($conf['sanitize_input_whitelist']) || !is_array($conf['sanitize_input_whitelist'])) {
+      $conf['sanitize_input_whitelist'] = array();
+    }
+
+    $sanitized_keys = _drupal_bootstrap_sanitize_input($_GET, $conf['sanitize_input_whitelist']);
+    $sanitized_keys = array_merge($sanitized_keys, _drupal_bootstrap_sanitize_input($_POST, $conf['sanitize_input_whitelist']));
+    $sanitized_keys = array_merge($sanitized_keys, _drupal_bootstrap_sanitize_input($_REQUEST, $conf['sanitize_input_whitelist']));
+    $sanitized_keys = array_merge($sanitized_keys, _drupal_bootstrap_sanitize_input($_COOKIE, $conf['sanitize_input_whitelist']));
+    $sanitized_keys = array_unique($sanitized_keys);
+
+    if (count($sanitized_keys) && !empty($conf['sanitize_input_logging'])) {
+      trigger_error(check_plain(sprintf('Potentially unsafe keys removed from request parameters: %s', implode(', ', $sanitized_keys)), E_USER_WARNING));
+    }
+
+    $sanitized = TRUE;
+  }
+}
+
+/**
+ * Sanitizes unsafe keys from user input.
+ *
+ * @param mixed $input
+ *   Input to sanitize.
+ * @param array $whitelist
+ *   Whitelist of values.
+ * @return array
+ */
+function _drupal_bootstrap_sanitize_input(&$input, $whitelist = array()) {
+  $sanitized_keys = array();
+
+  if (is_array($input)) {
+    foreach ($input as $key => $value) {
+      if ($key !== '' && $key[0] === '#' && !in_array($key, $whitelist, TRUE)) {
+        unset($input[$key]);
+        $sanitized_keys[] = $key;
+      }
+      elseif (is_array($input[$key])) {
+        $sanitized_keys = array_merge($sanitized_keys, _drupal_bootstrap_sanitize_input($input[$key], $whitelist));
+      }
+    }
+  }
+
+  return $sanitized_keys;
+}
diff --git a/modules/system/system.module b/modules/system/system.module
index ae07594..b3139e3 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -8,7 +8,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.38-p2');
+define('VERSION', '6.38-p3');
 
 /**
  * Core API compatibility.
